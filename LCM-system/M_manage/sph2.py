# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'basicinfo2_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys

from M_manage import basicinfo2

sys.path.append("/")  # 返回上层路径
from service import service


class Ui_MainWindow(QMainWindow):
    # 构造方法
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setWindowFlags(QtCore.Qt.MSWindowsFixedSizeDialogHint)  # 只显示最小化和关闭按钮
        self.setupUi(self)  # 初始化窗体设置

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(854, 596)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 4)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.inbh = QtWidgets.QLineEdit(self.centralwidget)
        self.inbh.setObjectName("inbh")
        self.gridLayout.addWidget(self.inbh, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 2, 1, 1)
        self.incsyd = QtWidgets.QLineEdit(self.centralwidget)
        self.incsyd.setObjectName("incsyd")
        self.gridLayout.addWidget(self.incsyd, 1, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 2, 0, 1, 1)
        self.inyhyd = QtWidgets.QLineEdit(self.centralwidget)
        self.inyhyd.setObjectName("inyhyd")
        self.gridLayout.addWidget(self.inyhyd, 2, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 2, 2, 1, 1)
        self.inmhyd = QtWidgets.QLineEdit(self.centralwidget)
        self.inmhyd.setObjectName("inmhyd")
        self.gridLayout.addWidget(self.inmhyd, 2, 3, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 0, 1, 1)
        self.injb = QtWidgets.QLineEdit(self.centralwidget)
        self.injb.setObjectName("injb")
        self.gridLayout.addWidget(self.injb, 3, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_add = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_add.setMaximumSize(QtCore.QSize(645, 16777215))
        self.pushButton_add.setObjectName("pushButton_add")
        self.horizontalLayout.addWidget(self.pushButton_add)
        self.pushButton_new = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_new.setMaximumSize(QtCore.QSize(645, 16777215))
        self.pushButton_new.setObjectName("pushButton_new")
        self.horizontalLayout.addWidget(self.pushButton_new)
        self.pushButton_del = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_del.setMaximumSize(QtCore.QSize(645, 16777215))
        self.pushButton_del.setObjectName("pushButton_del")
        self.horizontalLayout.addWidget(self.pushButton_del)
        self.pushButton_exit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_exit.setMaximumSize(QtCore.QSize(645, 16777215))
        self.pushButton_exit.setObjectName("pushButton_exit")
        self.horizontalLayout.addWidget(self.pushButton_exit)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 854, 34))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.query()  # 窗体加载时显示所有数据

        self.tableWidget.itemClicked.connect(self.getItem)  # 获取选中的单元格数据
        self.pushButton_add.clicked.connect(self.add)  # 绑定添加按钮的单击信号
        self.pushButton_new.clicked.connect(self.edit)  # 绑定修改按钮的单击信号
        self.pushButton_del.clicked.connect(self.delete)  # 绑定删除按钮的单击信号
        self.pushButton_exit.clicked.connect(MainWindow.close)  # 绑定退出按钮的单击信号

        self.tableWidget.resizeColumnsToContents()  # 使列宽跟随内容改变
        self.tableWidget.resizeRowsToContents()  # 使行高度跟随内容改变
        self.tableWidget.setAlternatingRowColors(True)  # 使表格颜色交错显示

        self.tableWidget.horizontalHeader().setStretchLastSection(True)  # 设置最后一列自动填充容器
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)  # 设置表格的自动伸缩模式
        self.tableWidget.verticalHeader().setVisible(True)  # 隐藏垂直标题
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)  # 禁止编辑单元格
        self.tableWidget.sortItems(0, QtCore.Qt.AscendingOrder)  # 设置降序排序

        # 查询基本信息，并显示在表格中

    def query(self):
        self.tableWidget.setRowCount(0)  # 清空表格中的所有行
        result = service.query("select * from 圆球度表")  # 调用服务类中的公共方法执行查询语句
        row = len(result)  # 取得记录个数，用于设置表格的行数
        self.tableWidget.setRowCount(row)  # 设置表格行数
        self.tableWidget.setColumnCount(5)  # 设置表格列数
        # 设置表格的标题名称
        for i in range(row):  # 遍历行
            for j in range(self.tableWidget.columnCount()):  # 遍历列
                data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                self.tableWidget.setItem(i, j, data)  # 设置每个单元格的数据

        # 获取选中的表格内容

    def getItem(self, item):
        if item.column() == 0:
            self.select = item.text()  # 获取单击的单元格文本
            self.inbh.setText(self.select)  # 显示在编号文本框中
        elif item.column() == 1:
            # 获取单击的单元格文本
            self.incsyd.setText(item.text())  # 显示在初始圆度文本框中
        elif item.column() == 2:
            # 获取单击的单元格文本
            self.inyhyd.setText(item.text())  # 显示在压后圆度文本框中
        elif item.column() == 3:
            # 获取单击的单元格文本
            self.inmhyd.setText(item.text())  # 显示在磨后圆度文本框
        elif item.column() == 4:
            # 获取单击的单元格文本
            self.injb.setText(item.text())  # 显示在级别文本框中

    def getName(self, name):
        result = service.query("select * from 圆球度表 where 编号= %s", name)
        return len(result)

        # 添加材料信息

    def add(self):
        try:
            inbh = self.inbh.text()  # 记录修改的编号
            incsyd = self.incsyd.text()  # 记录修改的初始圆度
            inyhyd = self.inyhyd.text()  # 记录修改的压后圆度
            inmhyd = self.inmhyd.text()  # 记录修改的磨后圆度
            injb = self.injb.text()  # 记录修改的级别

            incsyd = service.returnnull(incsyd)
            inyhyd = service.returnnull(inyhyd)
            inmhyd = service.returnnull(inmhyd)



            if inbh != "":  # 判断编号不为空
                if self.getName(inbh) > 0:
                    QMessageBox.information(None, '提示', '您要添加的材料数据已经存在，请重新输入！', QMessageBox.Ok)
                else:
                    # 判断基本信息表中是否有主键
                    if service.getName(inbh) == 0:
                        QMessageBox.information(None, '提示', '请先在基本信息表中添加至少编号等基本信息！', QMessageBox.Ok)
                        self.a = basicinfo2.Ui_MainWindow()  # 创建按基本信息查询窗体对象
                        self.a.show()  # 显示窗体
                    else:
                        result = service.exec("insert into 圆球度表(编号,初始圆度,压后圆度,磨后圆度,级别) values (%s,%s,%s,%s,%s)",
                                              (inbh, incsyd, inyhyd, inmhyd, injb))
                        if result > 0:  # 如果结果大于0，说明添加成功
                            self.query()  # 在表格中显示最新数据
                            self.inbh.setText("")
                            self.incsyd.setText("")
                            self.inyhyd.setText("")
                            self.inmhyd.setText("")
                            self.injb.setText("")
                            QMessageBox.information(None, '提示', '材料信息添加成功！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请必须输入编号，再执行相关操作！', QMessageBox.Ok)
        except:
            QMessageBox.warning(None, '警告', '请检查输入正确的参数类型', QMessageBox.Ok)
            self.incsyd.setText("")
            self.inyhyd.setText("")
            self.inmhyd.setText("")
            self.injb.setText("")

        # 修改材料信息

    def edit(self):
        try:
            inbh = self.inbh.text()  # 记录修改的编号
            incsyd = self.incsyd.text()  # 记录修改的初始圆度
            inyhyd = self.inyhyd.text()  # 记录修改的压后圆度
            inmhyd = self.inmhyd.text()  # 记录修改的磨后圆度
            injb = self.injb.text()  # 记录修改的级别

            incsyd = service.returnnull(incsyd)
            inyhyd = service.returnnull(inyhyd)
            inmhyd = service.returnnull(inmhyd)
            if inbh != "":  # 判断编号不为空
                if self.getName(inbh) <= 0:
                    self.inbh.setText("")
                    self.incsyd.setText("")
                    self.inyhyd.setText("")
                    self.inmhyd.setText("")
                    self.injb.setText("")
                    QMessageBox.information(None, '提示', '要修改更新的数据不存在，请重新输入！', QMessageBox.Ok)
                else:
                    result = service.exec("update 圆球度表 set 初始圆度= %s,压后圆度=%s,磨后圆度=%s,级别=%s where 编号=%s",
                                          (incsyd, inyhyd, inmhyd, injb, inbh))
                    if result > 0:  # 如果结果大于0，说明修改成功
                        self.query()  # 在表格中显示最新数据
                        self.inbh.setText("")
                        self.incsyd.setText("")
                        self.inyhyd.setText("")
                        self.inmhyd.setText("")
                        self.injb.setText("")
                        QMessageBox.information(None, '提示', '信息更新成功！', QMessageBox.Ok)

            else:
                self.inbh.setText("")
                self.incsyd.setText("")
                self.inyhyd.setText("")
                self.inmhyd.setText("")
                self.injb.setText("")
                QMessageBox.warning(None, '警告', '请先点击编号或输入编号选择要修改更新的数据！', QMessageBox.Ok)
        except:
            QMessageBox.warning(None, '警告', '请输入正确的参数类型', QMessageBox.Ok)

            # 删除材料信息

    def delete(self):
        try:
            inbh = self.inbh.text()  # 记录要删除的编号
            # 执行删除操作
            if inbh != "":
                if self.getName(inbh) <= 0:  # 判断编号是否存在
                    QMessageBox.information(None, '提示', '要删除的数据不存在，请重新输入！', QMessageBox.Ok)
                    self.inbh.setText("")
                    self.incsyd.setText("")
                    self.inyhyd.setText("")
                    self.inmhyd.setText("")
                    self.injb.setText("")
                else:
                    result = service.exec("delete from 圆球度表 where 编号= %s", (inbh,))
                    if result > 0:  # 如果结果大于0，说明删除成功
                        self.query()  # 在表格中显示最新数据
                        self.inbh.setText("")
                        self.incsyd.setText("")
                        self.inyhyd.setText("")
                        self.inmhyd.setText("")
                        self.injb.setText("")
                        QMessageBox.information(None, '提示', '信息删除成功！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请先点击编号或输入编号选择要删除的数据！', QMessageBox.Ok)
                self.inbh.setText("")
                self.incsyd.setText("")
                self.inyhyd.setText("")
                self.inmhyd.setText("")
                self.injb.setText("")


        except:
            QMessageBox.warning(None, '警告', '请先点击编号或输入编号选择要删除的数据！发发发', QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "材料按圆球度管理"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "编号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "初始圆度"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "压后圆度"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "磨后圆度"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "级别"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">编号</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">初始圆度</p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">压后圆度</p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">磨后圆度</p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">级别</p></body></html>"))
        self.pushButton_add.setText(_translate("MainWindow", "添加"))
        self.pushButton_new.setText(_translate("MainWindow", "更新"))
        self.pushButton_del.setText(_translate("MainWindow", "删除"))
        self.pushButton_exit.setText(_translate("MainWindow", "退出"))



